swagger: '2.0'
info:
  description: Mahboonkrong Rice Library Api
  version: 1.0.0
  title: Mahboonkrong Rice
schemes:
  - https
  - http
paths:
  /mbkserver/members:
    post:
      tags:
        - Members
      summary: Add a new Members
      description: ''
      operationId: createMembers
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Members object
          required: true
          schema:
             $ref: '#/definitions/tbMembers'
      responses:
        '200':
          description: Success
        '405':
          description: Invalid input
    put:
      tags:
        - Members
      summary: Update an existing Members
      description: ''
      operationId: updateMembers
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Members object
          required: true
          schema:
            $ref: '#/definitions/tbMembers'
      responses:
        '200':
          description: Success
        '404':
          description: Members not found
    get:
      tags:
        - Members
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/tbMembers'
        '400':
          description: Invalid status value
  /mbkserver/members/Show:
    get:
      tags:
        - Members
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use        
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/tbMembers'
        '400':
          description: Invalid tag value
  /mbkserver/members/export:
    get:
      tags:
        - Members
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/tbMembers'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
  /mbkserver/members/getMember:
    get:
      tags:
        - Members
      summary: Find member by ID
      description: Returns a single member
      operationId: getMember
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Members object
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: integer
                format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/tbMembers'
        '400':
          description: Invalid ID supplied
        '404':
          description: Member not found
  /mbkserver/members/getMemberPoints:
    get:
      tags:
        - Members
      summary: People find employee points that will expire within a year.
      description: Returns Member & Member Point
      operationId: getMemberPoint
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Members object
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: integer
                format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/tbMemberPoints'
        '404':
          description: Member not found
  /mbkserver/members/getMemberPointsList:
    get:
      tags:
        - Members
      summary: Retrieve employee scores by member ID.
      description: Returns Member & Member Point By memberId
      operationId: getMemberPointsList
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Members object
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: integer
                format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/tbMemberPoints'
        '404':
          description: Member not found
  /mbkserver/members/byId/{id}:
    get:
      tags:
        - Members
      summary: Find purchase member by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getMemberById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of member that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/tbMembers'
        '404':
          description: Members not found
  /mbkserver/members/Show/byId/{id}:
    get:
      tags:
        - Members
      summary: Find purchase member by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getMemberShowById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of member that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/tbMembers'
        '404':
          description: Members not found
  /mbmserver/members/byUid:
    post:
      tags:
        - Members
      summary: Updates a Member
      description: ''
      operationId: updateMemberById
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Members object
          required: true
          schema:
            type: object
            required:
              - uid
            properties:
              uid:
                type: string
                example: uid9xxxxx51564564561
      responses:
        '405':
          description: Invalid input   
  /mbmserver/members/checkRegister:
    post:
      tags:
        - Members
      summary: Updates a Member
      description: ''
      operationId: checkRegister
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Members object
          required: true
          schema:
            type: object
            required:
              - uid
            properties:
              uid:
                type: string
                example: uid9xxxxx51564564561
      responses:
        '405':
          description: Invalid input   
  /mbkserver/members/{memberId}:
    delete:
      tags:
        - Members
      summary: Delete Member by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteMemberById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: memberId
          in: path
          description: ID of the member that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '200':
          description: Success
        '400':
          description: Invalid ID supplied
        '404':
          description: member not found

  /mbkserver/users/login:
    get:
      tags:
        - Users
      summary: For Login to use the system
      description: Returns login Success
      operationId: userLogin
      produces:
        - application/json
      parameters: 
        - in: body
          name: body
          description: Members object
          required: true
          schema:
            type: object
            required:
              - uid
            properties:
              uid:
                type: string
                example: uid9xxxxx51564564561
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              uid:
                type: integer
                format: int32
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: ''
      operationId: placeOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: order placed for purchasing the pet
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid Order
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getOrderById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
definitions:
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
        default: false
    xml:
      name: Order
  Category:
    type: object
    properties:
      id: 
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  tbMembers:
    type: object
    required:
      - firstName
      - lastName
      - phone
      - email
      - birthDate
      - registerDate
    properties:
      id:
        type: integer
        example: 1
      firstName:
        type: string
        example: doggie
      lastName:
        type: string
        example: boonrang
      phone:
        type: string
        example: 080-8888888
      email:
        type: string
        example: www@gmail.com
      birthDate: 
        type: string
        example: 09/09/2019
      registerDate:
        type: string  
        example: 09/09/2019
      memberPoint:
        type: integer  
        example: 100
      memberPointExpire:
        type: string  
        example: 09/09/2019
    xml:
      name: tbMembers
  tbMemberPoints:
    type: object
    required:
      - tbMemberId
    properties:
      id:
        type: integer
        format: int64
      tbMemberId:
        type: integer
        format: int64
      tbPointCodeHDId:
        type: integer
        format: int64
      campaignType:
        type: integer
        format: int64
      code:
        type: string
        example: PRGC-xx1xx51x
      point:
        type: integer
        example: 1200
      redeemDate: 
        type: string
        example: 09/09/2019
      expireDate: 
        type: string
        example: 09/09/2019
    xml:
      name: tbMemberPoints
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
